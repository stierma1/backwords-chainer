/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var goal = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[9,10,11,12,13,14,15,16,17,18,19,20,21,23,24,25,29,40],$V1=[2,40],$V2=[1,19],$V3=[1,22],$V4=[1,21],$V5=[5,26,27,30],$V6=[1,41],$V7=[1,44],$V8=[1,45],$V9=[1,46],$Va=[5,8,26,27,30],$Vb=[22,23,24,25,34,36,40],$Vc=[1,64],$Vd=[8,26,29,30,33,35],$Ve=[8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,40,41],$Vf=[1,79],$Vg=[1,78],$Vh=[1,80],$Vi=[1,101],$Vj=[1,102],$Vk=[1,103],$Vl=[1,104],$Vm=[1,105],$Vn=[1,106],$Vo=[1,107],$Vp=[1,108],$Vq=[1,109],$Vr=[1,110],$Vs=[1,111],$Vt=[1,112],$Vu=[1,113],$Vv=[1,114],$Vw=[1,115],$Vx=[1,116],$Vy=[1,117],$Vz=[1,118],$VA=[1,119],$VB=[1,120],$VC=[1,121],$VD=[1,122],$VE=[1,123],$VF=[1,124],$VG=[1,125],$VH=[1,126],$VI=[1,127],$VJ=[1,128],$VK=[1,129],$VL=[1,130],$VM=[8,26,30,33,35],$VN=[26,35],$VO=[2,94],$VP=[8,26,30],$VQ=[26,33,35],$VR=[8,35];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"goal":4,"EOF":5,"statements":6,"nonQuoteToken":7,"WHITE_SPACE":8,"GREATER_THAN":9,"GREATER_THAN_EQUAL":10,"LESS_THAN":11,"LESS_THAN_EQUAL":12,"UNIFY":13,"NOT":14,"ONCE":15,"CALL":16,"APPLY":17,"FUNCTOR":18,"ADD":19,"MULTI":20,"SYSTEM_CALL":21,"VARIABLE":22,"ATOM":23,"OBJECT_ATOM":24,"NUMBER":25,",":26,";":27,".":28,"(":29,")":30,":-":31,"!":32,"|":33,"[":34,"]":35,"_":36,"INVALID":37,"fullyEscaped":38,"ESCAPE_CHAR":39,"DOUBLE_QUOTE":40,"ESCAGE_CHAR":41,"stringContent":42,"string":43,"opt_white":44,"clauses":45,"fact":46,"hornClause":47,"predicate":48,"END":49,"body":50,"statement":51,"unionStatement":52,"notStatement":53,"onceStatement":54,"applyStatement":55,"callStatement":56,"functorStatement":57,"systemCallStatement":58,"addStatement":59,"multiStatement":60,"greaterThanStatement":61,"greaterThanEqualStatement":62,"lessThanStatement":63,"lessThanEqualStatement":64,"atomOrVariableOrPredicateOrList":65,"predicateHead":66,"atom":67,"variable":68,"number":69,"atomOrVariableOrPredicate":70,"list":71,"atomOrVariable":72,"atomOrVariableOrList":73,"listHeadNonEmpty":74,"listHead":75,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"WHITE_SPACE",9:"GREATER_THAN",10:"GREATER_THAN_EQUAL",11:"LESS_THAN",12:"LESS_THAN_EQUAL",13:"UNIFY",14:"NOT",15:"ONCE",16:"CALL",17:"APPLY",18:"FUNCTOR",19:"ADD",20:"MULTI",21:"SYSTEM_CALL",22:"VARIABLE",23:"ATOM",24:"OBJECT_ATOM",25:"NUMBER",26:",",27:";",28:".",29:"(",30:")",31:":-",32:"!",33:"|",34:"[",35:"]",36:"_",37:"INVALID",39:"ESCAPE_CHAR",40:"DOUBLE_QUOTE",41:"ESCAGE_CHAR",49:"END"},
productions_: [0,[3,2],[4,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[38,2],[38,2],[38,2],[42,0],[42,2],[42,2],[43,3],[44,0],[44,1],[45,2],[45,2],[45,3],[45,3],[46,2],[47,3],[50,3],[6,2],[6,4],[6,4],[51,2],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,4],[58,6],[63,10],[64,10],[61,10],[62,10],[59,14],[60,14],[48,3],[66,4],[66,5],[53,4],[56,6],[54,4],[57,14],[55,10],[52,10],[68,1],[68,1],[67,1],[67,1],[67,1],[67,1],[69,1],[65,1],[65,1],[70,1],[70,1],[72,1],[72,1],[73,1],[73,1],[71,6],[71,2],[74,4],[74,5],[75,2],[75,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

      return $$[$0-1];
    
break;
case 2: case 53: case 54: case 55: case 56: case 57: case 58: case 59: case 60: case 61: case 62: case 63: case 64: case 65: case 86: case 90: case 92: case 93: case 94: case 95: case 96: case 97: case 103:
this.$ = $$[$0];
break;
case 33: case 34: case 35: case 37: case 38:
this.$ = $$[$0-1] + $$[$0];
break;
case 36: case 40:
this.$ = "";
break;
case 39:
this.$ = $$[$0-2] + $$[$0-1] + $$[$0];
break;
case 42: case 43:
this.$ = [$$[$0]];
break;
case 44: case 45:

    $$[$0-2].push($$[$0]);
    this.$ = $$[$0-2];
  
break;
case 46:

    this.$ = yy.createHornClause($$[$0-1]);
  
break;
case 47:

    this.$ = yy.createHornClause($$[$0-2], $$[$0]);
  
break;
case 48: case 49:

    this.$ = yy.createAndStatements($$[$0-1]);
  
break;
case 50:

    this.$ = yy.createOrStatements($$[$0-3], $$[$0-1]);
  
break;
case 51:

    this.$ = yy.createAndStatements($$[$0-3], $$[$0-1]);
  
break;
case 52:

    this.$ = yy.createPredicateStatement($$[$0])
  
break;
case 66:

    this.$ = $$[$0-1];
  
break;
case 67:

    this.$ = yy.SystemCalls($$[$0-2]);
  
break;
case 68:

      this.$ = yy.createLessThanStatement($$[$0-6], $$[$0-2]);
    
break;
case 69:

        this.$ = yy.createLessThanEqualStatement($$[$0-6], $$[$0-2]);
      
break;
case 70:

    this.$ = yy.createGreaterThanStatement($$[$0-6], $$[$0-2]);
  
break;
case 71:

      this.$ = yy.createGreaterThanEqualStatement($$[$0-6], $$[$0-2]);
    
break;
case 72:

    this.$ = yy.addStatement($$[$0-10], $$[$0-6], $$[$0-2]);
  
break;
case 73:

    this.$ = yy.createMultiStatement($$[$0-10], $$[$0-6], $$[$0-2]);
  
break;
case 74:

    this.$ = yy.createPredicate($$[$0-2]);
  
break;
case 75:

      this.$ = {name:$$[$0-3].name, argsList:[$$[$0]]}
  
break;
case 76:

    $$[$0-4].argsList.push($$[$0]);
    this.$ = $$[$0-4];
  
break;
case 77:

    this.$ = yy.createNotStatement($$[$0-1]);
  
break;
case 78:

    this.$ = yy.createCallStatement($$[$0-2]);
  
break;
case 79:

      this.$ = yy.createOnceStatement($$[$0-1]);
    
break;
case 80:

      this.$ = yy.createFunctorStatement($$[$0-10], $$[$0-6], $$[$0-2]);
    
break;
case 81:

      this.$ = yy.createApplyStatement($$[$0-6], $$[$0-2]);
    
break;
case 82:

    this.$ = yy.createUnionStatement($$[$0-6], $$[$0-2]);
  
break;
case 83:

      this.$ = yy.createVariable($$[$0]);
    
break;
case 84:

      this.$ = yy.createFreeVariable();
    
break;
case 85:

      this.$ = yy.createAtom($$[$0]);
    
break;
case 87:

      this.$ = yy.createString($$[$0])
    
break;
case 88:

      var objAtomKey = $$[$0].replace("{","").replace("}","");
      this.$ = yy.createObjectAtom(objAtomKey);
    
break;
case 89:

      this.$ = yy.createNumber($$[$0]);
    
break;
case 98:

      this.$ = yy.createList($$[$0-5], $$[$0-2]);
    
break;
case 99:

      this.$ = yy.createList($$[$0-1]);
    
break;
case 100:
this.$ = [$$[$0-1]];
break;
case 101:

      $$[$0-4].push($$[$0-1]);
      this.$ = $$[$0-4];
    
break;
case 102:
this.$ = [];
break;
}
},
table: [o($V0,$V1,{3:1,4:2,6:3,51:4,44:5,52:6,53:7,54:8,55:9,56:10,57:11,58:12,59:13,60:14,61:15,62:16,63:17,64:18,8:$V2}),{1:[3]},{5:[1,20]},{5:[2,2],26:$V3,27:$V4},o($V5,$V1,{44:23,8:$V2}),{9:[1,35],10:[1,36],11:[1,37],12:[1,38],13:[1,26],14:[1,27],15:[1,28],16:[1,30],17:[1,29],18:[1,31],19:[1,33],20:[1,34],21:[1,32],23:$V6,24:$V7,25:$V8,29:[1,25],40:$V9,43:43,48:24,66:39,67:40,69:42},o($Va,[2,53]),o($Va,[2,54]),o($Va,[2,55]),o($Va,[2,56]),o($Va,[2,57]),o($Va,[2,58]),o($Va,[2,59]),o($Va,[2,60]),o($Va,[2,61]),o($Va,[2,62]),o($Va,[2,63]),o($Va,[2,64]),o($Va,[2,65]),o([5,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,29,30,33,34,35,36,40],[2,41]),{1:[2,1]},o($V0,$V1,{44:5,52:6,53:7,54:8,55:9,56:10,57:11,58:12,59:13,60:14,61:15,62:16,63:17,64:18,51:47,8:$V2}),o($V0,$V1,{44:5,52:6,53:7,54:8,55:9,56:10,57:11,58:12,59:13,60:14,61:15,62:16,63:17,64:18,51:48,8:$V2}),o($V5,[2,49]),o($Va,[2,52]),o($V0,$V1,{51:4,44:5,52:6,53:7,54:8,55:9,56:10,57:11,58:12,59:13,60:14,61:15,62:16,63:17,64:18,6:49,8:$V2}),o($Vb,$V1,{44:50,8:$V2}),o($V0,$V1,{51:4,44:5,52:6,53:7,54:8,55:9,56:10,57:11,58:12,59:13,60:14,61:15,62:16,63:17,64:18,6:51,8:$V2}),o($V0,$V1,{51:4,44:5,52:6,53:7,54:8,55:9,56:10,57:11,58:12,59:13,60:14,61:15,62:16,63:17,64:18,6:52,8:$V2}),o($Vb,$V1,{44:53,8:$V2}),o($Vb,$V1,{44:54,8:$V2}),o($Vb,$V1,{44:55,8:$V2}),o($Vb,$V1,{44:56,8:$V2}),o($Vb,$V1,{44:57,8:$V2}),o($Vb,$V1,{44:58,8:$V2}),o($Vb,$V1,{44:59,8:$V2}),o($Vb,$V1,{44:60,8:$V2}),o($Vb,$V1,{44:61,8:$V2}),o($Vb,$V1,{44:62,8:$V2}),o([26,30],$V1,{44:63,8:$V2}),{29:$Vc},o($Vd,[2,85]),o($Vd,[2,86]),o($Vd,[2,87]),o($Vd,[2,88]),o($Vd,[2,89]),o($Ve,[2,36],{42:65}),o($V5,$V1,{44:66,8:$V2}),o($V5,$V1,{44:67,8:$V2}),{26:$V3,27:$V4,30:[1,68]},{22:$Vf,23:$V6,24:$V7,25:$V8,34:$Vg,36:$Vh,40:$V9,43:43,48:73,65:69,66:39,67:76,68:77,69:42,70:70,71:71,72:72,74:74,75:75},{26:$V3,27:$V4,30:[1,81]},{26:$V3,27:$V4,30:[1,82]},{22:$Vf,23:$V6,24:$V7,25:$V8,34:$Vg,36:$Vh,40:$V9,43:43,48:73,65:83,66:39,67:76,68:77,69:42,70:70,71:71,72:72,74:74,75:75},{22:$Vf,23:$V6,24:$V7,25:$V8,34:$Vg,36:$Vh,40:$V9,43:43,48:73,65:84,66:39,67:76,68:77,69:42,70:70,71:71,72:72,74:74,75:75},{22:$Vf,23:$V6,24:$V7,25:$V8,34:$Vg,36:$Vh,40:$V9,43:43,48:73,65:85,66:39,67:76,68:77,69:42,70:70,71:71,72:72,74:74,75:75},{22:$Vf,23:$V6,24:$V7,25:$V8,34:$Vg,36:$Vh,40:$V9,43:43,48:73,65:86,66:39,67:76,68:77,69:42,70:70,71:71,72:72,74:74,75:75},{22:$Vf,23:$V6,24:$V7,25:$V8,34:$Vg,36:$Vh,40:$V9,43:43,48:73,65:87,66:39,67:76,68:77,69:42,70:70,71:71,72:72,74:74,75:75},{22:$Vf,23:$V6,24:$V7,25:$V8,34:$Vg,36:$Vh,40:$V9,43:43,48:73,65:88,66:39,67:76,68:77,69:42,70:70,71:71,72:72,74:74,75:75},{22:$Vf,23:$V6,24:$V7,25:$V8,34:$Vg,36:$Vh,40:$V9,43:43,48:73,65:89,66:39,67:76,68:77,69:42,70:70,71:71,72:72,74:74,75:75},{22:$Vf,23:$V6,24:$V7,25:$V8,34:$Vg,36:$Vh,40:$V9,43:43,48:73,65:90,66:39,67:76,68:77,69:42,70:70,71:71,72:72,74:74,75:75},{22:$Vf,23:$V6,24:$V7,25:$V8,34:$Vg,36:$Vh,40:$V9,43:43,48:73,65:91,66:39,67:76,68:77,69:42,70:70,71:71,72:72,74:74,75:75},{22:$Vf,23:$V6,24:$V7,25:$V8,34:$Vg,36:$Vh,40:$V9,43:43,48:73,65:92,66:39,67:76,68:77,69:42,70:70,71:71,72:72,74:74,75:75},{26:[1,94],30:[1,93]},o($Vb,$V1,{44:95,8:$V2}),{7:98,8:$Vi,9:$Vj,10:$Vk,11:$Vl,12:$Vm,13:$Vn,14:$Vo,15:$Vp,16:$Vq,17:$Vr,18:$Vs,19:$Vt,20:$Vu,21:$Vv,22:$Vw,23:$Vx,24:$Vy,25:$Vz,26:$VA,27:$VB,28:$VC,29:$VD,30:$VE,31:$VF,32:$VG,33:$VH,34:$VI,35:$VJ,36:$VK,37:$VL,38:97,39:[1,99],40:[1,96],41:[1,100]},o($V5,[2,50]),o($V5,[2,51]),o($Va,[2,66]),{8:$V2,26:$V1,44:131},o($VM,[2,90]),o($VM,[2,91]),o($VM,[2,92]),o($VM,[2,93]),o($VN,[2,103],{33:[1,132]}),{26:[1,134],35:[1,133]},o($VM,$VO,{29:$Vc}),o($VM,[2,95]),o([22,23,24,25,26,34,35,36,40],$V1,{44:135,8:$V2}),o($VM,[2,83]),o($VM,[2,84]),o($Va,[2,77]),o($Va,[2,79]),{8:$V2,26:$V1,44:136},{8:$V2,30:$V1,44:137},{8:$V2,26:$V1,44:138},{8:$V2,30:$V1,44:139},{8:$V2,26:$V1,44:140},{8:$V2,26:$V1,44:141},{8:$V2,26:$V1,44:142},{8:$V2,26:$V1,44:143},{8:$V2,26:$V1,44:144},{8:$V2,26:$V1,44:145},o([5,8,26,27,30,33,35],[2,74]),o($Vb,$V1,{44:146,8:$V2}),{22:$Vf,23:$V6,24:$V7,25:$V8,34:$Vg,36:$Vh,40:$V9,43:43,48:73,65:147,66:39,67:76,68:77,69:42,70:70,71:71,72:72,74:74,75:75},o($Vd,[2,39]),o($Ve,[2,37]),o($Ve,[2,38]),{39:[1,149],40:[1,148]},{7:150,8:$Vi,9:$Vj,10:$Vk,11:$Vl,12:$Vm,13:$Vn,14:$Vo,15:$Vp,16:$Vq,17:$Vr,18:$Vs,19:$Vt,20:$Vu,21:$Vv,22:$Vw,23:$Vx,24:$Vy,25:$Vz,26:$VA,27:$VB,28:$VC,29:$VD,30:$VE,31:$VF,32:$VG,33:$VH,34:$VI,35:$VJ,36:$VK,37:$VL},o($Ve,[2,3]),o($Ve,[2,4]),o($Ve,[2,5]),o($Ve,[2,6]),o($Ve,[2,7]),o($Ve,[2,8]),o($Ve,[2,9]),o($Ve,[2,10]),o($Ve,[2,11]),o($Ve,[2,12]),o($Ve,[2,13]),o($Ve,[2,14]),o($Ve,[2,15]),o($Ve,[2,16]),o($Ve,[2,17]),o($Ve,[2,18]),o($Ve,[2,19]),o($Ve,[2,20]),o($Ve,[2,21]),o($Ve,[2,22]),o($Ve,[2,23]),o($Ve,[2,24]),o($Ve,[2,25]),o($Ve,[2,26]),o($Ve,[2,27]),o($Ve,[2,28]),o($Ve,[2,29]),o($Ve,[2,30]),o($Ve,[2,31]),o($Ve,[2,32]),{26:[1,151]},o($Vb,$V1,{44:152,8:$V2}),o($VM,[2,99]),o($Vb,$V1,{44:153,8:$V2}),o($VN,[2,102],{66:39,69:42,43:43,70:70,71:71,72:72,48:73,74:74,75:75,67:76,68:77,65:154,22:$Vf,23:$V6,24:$V7,25:$V8,34:$Vg,36:$Vh,40:$V9}),{26:[1,155]},{30:[1,156]},{26:[1,157]},{30:[1,158]},{26:[1,159]},{26:[1,160]},{26:[1,161]},{26:[1,162]},{26:[1,163]},{26:[1,164]},{22:$Vf,23:$V6,24:$V7,25:$V8,34:$Vg,36:$Vh,40:$V9,43:43,48:73,65:165,66:39,67:76,68:77,69:42,70:70,71:71,72:72,74:74,75:75},o($VP,[2,75]),o($Ve,[2,33]),o($Ve,[2,35]),o($Ve,[2,34]),o($Vb,$V1,{44:166,8:$V2}),{22:$Vf,23:$V6,24:$V7,25:$V8,34:$Vg,36:$Vh,40:$V9,43:43,67:170,68:77,69:42,71:169,72:168,73:167,74:74,75:75},{22:$Vf,23:$V6,24:$V7,25:$V8,34:$Vg,36:$Vh,40:$V9,43:43,48:73,65:171,66:39,67:76,68:77,69:42,70:70,71:71,72:72,74:74,75:75},o($VQ,$V1,{44:172,8:$V2}),o($Vb,$V1,{44:173,8:$V2}),o($Va,[2,78]),o($Vb,$V1,{44:174,8:$V2}),o($Va,[2,67]),o($Vb,$V1,{44:175,8:$V2}),o($Vb,$V1,{44:176,8:$V2}),o($Vb,$V1,{44:177,8:$V2}),o($Vb,$V1,{44:178,8:$V2}),o($Vb,$V1,{44:179,8:$V2}),o($Vb,$V1,{44:180,8:$V2}),o($VP,[2,76]),{22:$Vf,23:$V6,24:$V7,25:$V8,34:$Vg,36:$Vh,40:$V9,43:43,48:73,65:181,66:39,67:76,68:77,69:42,70:70,71:71,72:72,74:74,75:75},{8:$V2,35:$V1,44:182},o($VR,[2,96]),o($VR,[2,97]),o($VR,$VO),o($VQ,$V1,{44:183,8:$V2}),o($VQ,[2,100]),{22:$Vf,23:$V6,24:$V7,25:$V8,34:$Vg,36:$Vh,40:$V9,43:43,48:73,65:184,66:39,67:76,68:77,69:42,70:70,71:71,72:72,74:74,75:75},{22:$Vf,23:$V6,24:$V7,25:$V8,34:$Vg,36:$Vh,40:$V9,43:43,48:73,65:185,66:39,67:76,68:77,69:42,70:70,71:71,72:72,74:74,75:75},{22:$Vf,23:$V6,24:$V7,25:$V8,34:$Vg,36:$Vh,40:$V9,43:43,48:73,65:186,66:39,67:76,68:77,69:42,70:70,71:71,72:72,74:74,75:75},{22:$Vf,23:$V6,24:$V7,25:$V8,34:$Vg,36:$Vh,40:$V9,43:43,48:73,65:187,66:39,67:76,68:77,69:42,70:70,71:71,72:72,74:74,75:75},{22:$Vf,23:$V6,24:$V7,25:$V8,34:$Vg,36:$Vh,40:$V9,43:43,48:73,65:188,66:39,67:76,68:77,69:42,70:70,71:71,72:72,74:74,75:75},{22:$Vf,23:$V6,24:$V7,25:$V8,34:$Vg,36:$Vh,40:$V9,43:43,48:73,65:189,66:39,67:76,68:77,69:42,70:70,71:71,72:72,74:74,75:75},{22:$Vf,23:$V6,24:$V7,25:$V8,34:$Vg,36:$Vh,40:$V9,43:43,48:73,65:190,66:39,67:76,68:77,69:42,70:70,71:71,72:72,74:74,75:75},{22:$Vf,23:$V6,24:$V7,25:$V8,34:$Vg,36:$Vh,40:$V9,43:43,48:73,65:191,66:39,67:76,68:77,69:42,70:70,71:71,72:72,74:74,75:75},{8:$V2,30:$V1,44:192},{35:[1,193]},o($VQ,[2,101]),{8:$V2,30:$V1,44:194},{8:$V2,26:$V1,44:195},{8:$V2,26:$V1,44:196},{8:$V2,26:$V1,44:197},{8:$V2,30:$V1,44:198},{8:$V2,30:$V1,44:199},{8:$V2,30:$V1,44:200},{8:$V2,30:$V1,44:201},{30:[1,202]},o($VM,[2,98]),{30:[1,203]},{26:[1,204]},{26:[1,205]},{26:[1,206]},{30:[1,207]},{30:[1,208]},{30:[1,209]},{30:[1,210]},o($Va,[2,82]),o($Va,[2,81]),o($Vb,$V1,{44:211,8:$V2}),o($Vb,$V1,{44:212,8:$V2}),o($Vb,$V1,{44:213,8:$V2}),o($Va,[2,70]),o($Va,[2,71]),o($Va,[2,68]),o($Va,[2,69]),{22:$Vf,23:$V6,24:$V7,25:$V8,34:$Vg,36:$Vh,40:$V9,43:43,48:73,65:214,66:39,67:76,68:77,69:42,70:70,71:71,72:72,74:74,75:75},{22:$Vf,23:$V6,24:$V7,25:$V8,34:$Vg,36:$Vh,40:$V9,43:43,48:73,65:215,66:39,67:76,68:77,69:42,70:70,71:71,72:72,74:74,75:75},{22:$Vf,23:$V6,24:$V7,25:$V8,34:$Vg,36:$Vh,40:$V9,43:43,48:73,65:216,66:39,67:76,68:77,69:42,70:70,71:71,72:72,74:74,75:75},{8:$V2,30:$V1,44:217},{8:$V2,30:$V1,44:218},{8:$V2,30:$V1,44:219},{30:[1,220]},{30:[1,221]},{30:[1,222]},o($Va,[2,80]),o($Va,[2,72]),o($Va,[2,73])],
defaultActions: {20:[2,1]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return "WHITE_SPACE"
break;
case 1:return "GREATER_THAN"
break;
case 2:return "GREATER_THAN_EQUAL"
break;
case 3:return "LESS_THAN"
break;
case 4:return "LESS_THAN_EQUAL"
break;
case 5:return "UNIFY"
break;
case 6:return 14
break;
case 7:return "ONCE"
break;
case 8:return "CALL"
break;
case 9:return "APPLY"
break;
case 10:return "FUNCTOR"
break;
case 11:return "ADD"
break;
case 12:return "MULTI"
break;
case 13:return "SYSTEM_CALL"
break;
case 14:return 22
break;
case 15:return 23
break;
case 16:return 25
break;
case 17:return "DOUBLE_QUOTE"
break;
case 18:return "ESCAPE_CHAR"
break;
case 19:return 26
break;
case 20:return 27
break;
case 21:return 49
break;
case 22:return 29
break;
case 23:return 30
break;
case 24:return 31
break;
case 25:return 32
break;
case 26:return "|"
break;
case 27:return "["
break;
case 28:return "]"
break;
case 29:return "_"
break;
case 30:return "OBJECT_ATOM"
break;
case 31:return 5
break;
case 32:return 37
break;
}
},
rules: [/^(?:\s+)/,/^(?:>\()/,/^(?:>=\()/,/^(?:<\()/,/^(?:<=\()/,/^(?:=\()/,/^(?:not\()/,/^(?:once\()/,/^(?:call\()/,/^(?:apply\()/,/^(?:functor\()/,/^(?:\+\()/,/^(?:\*\()/,/^(?:systemCall\()/,/^(?:[A-Z][_A-Za-z0-9]*)/,/^(?:[a-z][_A-Za-z0-9]*)/,/^(?:-?[0-9]+(\.[0-9]+)?)/,/^(?:[\"])/,/^(?:[\\])/,/^(?:,)/,/^(?:;)/,/^(?:\.)/,/^(?:\()/,/^(?:\))/,/^(?::-)/,/^(?:!)/,/^(?:\|)/,/^(?:\[)/,/^(?:\])/,/^(?:_\b)/,/^(?:\{[0-9A-Za-z_\-]+\})/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = goal;
exports.Parser = goal.Parser;
exports.parse = function () { return goal.parse.apply(goal, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}