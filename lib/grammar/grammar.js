/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,39],$V1=[1,4],$V2=[1,11],$V3=[1,14],$V4=[1,15],$V5=[6,10,25,26,41],$V6=[1,22],$V7=[10,27,30,31,34,36],$V8=[10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,41,42],$V9=[24,25,26,35,37,41],$Va=[1,34],$Vb=[1,35],$Vc=[1,36],$Vd=[1,37],$Ve=[1,38],$Vf=[1,39],$Vg=[1,40],$Vh=[1,41],$Vi=[1,42],$Vj=[1,43],$Vk=[1,44],$Vl=[1,45],$Vm=[1,46],$Vn=[1,47],$Vo=[1,48],$Vp=[1,49],$Vq=[1,50],$Vr=[1,51],$Vs=[1,52],$Vt=[1,53],$Vu=[1,54],$Vv=[1,55],$Vw=[1,56],$Vx=[1,57],$Vy=[1,58],$Vz=[1,59],$VA=[1,60],$VB=[1,61],$VC=[1,62],$VD=[11,12,13,14,15,16,17,18,19,20,21,22,23,25,26,30,41],$VE=[1,90],$VF=[1,89],$VG=[1,91],$VH=[1,97],$VI=[1,96],$VJ=[27,28,31,48],$VK=[10,27,28,31,48],$VL=[10,27,31],$VM=[10,27,31,34,36],$VN=[27,36],$VO=[2,92],$VP=[27,34,36],$VQ=[10,36];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"clauses":4,"opt_white":5,"EOF":6,"goal":7,"statements":8,"nonQuoteToken":9,"WHITE_SPACE":10,"GREATER_THAN":11,"GREATER_THAN_EQUAL":12,"LESS_THAN":13,"LESS_THAN_EQUAL":14,"UNIFY":15,"NOT":16,"ONCE":17,"CALL":18,"APPLY":19,"FUNCTOR":20,"ADD":21,"MULTI":22,"SYSTEM_CALL":23,"VARIABLE":24,"ATOM":25,"NUMBER":26,",":27,";":28,".":29,"(":30,")":31,":-":32,"!":33,"|":34,"[":35,"]":36,"_":37,"INVALID":38,"fullyEscaped":39,"ESCAPE_CHAR":40,"DOUBLE_QUOTE":41,"ESCAGE_CHAR":42,"stringContent":43,"string":44,"fact":45,"hornClause":46,"predicate":47,"END":48,"body":49,"statement":50,"unionStatement":51,"notStatement":52,"onceStatement":53,"applyStatement":54,"callStatement":55,"functorStatement":56,"systemCallStatement":57,"addStatement":58,"multiStatement":59,"greaterThanStatement":60,"greaterThanEqualStatement":61,"lessThanStatement":62,"lessThanEqualStatement":63,"atomOrVariableOrPredicateOrList":64,"predicateHead":65,"atom":66,"variable":67,"number":68,"atomOrVariableOrPredicate":69,"list":70,"atomOrVariable":71,"atomOrVariableOrList":72,"listHeadNonEmpty":73,"listHead":74,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",10:"WHITE_SPACE",11:"GREATER_THAN",12:"GREATER_THAN_EQUAL",13:"LESS_THAN",14:"LESS_THAN_EQUAL",15:"UNIFY",16:"NOT",17:"ONCE",18:"CALL",19:"APPLY",20:"FUNCTOR",21:"ADD",22:"MULTI",23:"SYSTEM_CALL",24:"VARIABLE",25:"ATOM",26:"NUMBER",27:",",28:";",29:".",30:"(",31:")",32:":-",33:"!",34:"|",35:"[",36:"]",37:"_",38:"INVALID",40:"ESCAPE_CHAR",41:"DOUBLE_QUOTE",42:"ESCAGE_CHAR",48:"END"},
productions_: [0,[3,3],[7,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[39,2],[39,2],[39,2],[43,0],[43,2],[43,2],[44,3],[5,0],[5,1],[4,2],[4,2],[4,3],[4,3],[45,2],[46,3],[49,3],[8,2],[8,4],[8,4],[50,2],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,4],[57,6],[62,10],[63,10],[60,10],[61,10],[58,14],[59,14],[47,3],[65,4],[65,5],[52,4],[55,6],[53,4],[56,14],[54,10],[51,10],[67,1],[67,1],[66,1],[66,1],[66,1],[68,1],[64,1],[64,1],[69,1],[69,1],[71,1],[71,1],[72,1],[72,1],[70,6],[70,2],[73,4],[73,5],[74,2],[74,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

      return $$[$0-2];
    
break;
case 2: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 59: case 60: case 61: case 62: case 63: case 64: case 85: case 88: case 90: case 91: case 92: case 93: case 94: case 95: case 101:
this.$ = $$[$0];
break;
case 32: case 33: case 34: case 36: case 37:
this.$ = $$[$0-1] + $$[$0];
break;
case 35: case 39:
this.$ = "";
break;
case 38:
this.$ = $$[$0-2] + $$[$0-1] + $$[$0];
break;
case 41: case 42:
this.$ = [$$[$0]];
break;
case 43: case 44:

    $$[$0-2].push($$[$0]);
    this.$ = $$[$0-2];
  
break;
case 45:

    this.$ = yy.createHornClause($$[$0-1]);
  
break;
case 46:

    this.$ = yy.createHornClause($$[$0-2], $$[$0]);
  
break;
case 47: case 48:

    this.$ = yy.createAndStatements($$[$0-1]);
  
break;
case 49:

    this.$ = yy.createOrStatements($$[$0-3], $$[$0-1]);
  
break;
case 50:

    this.$ = yy.createAndStatements($$[$0-3], $$[$0-1]);
  
break;
case 51:

    this.$ = yy.createPredicateStatement($$[$0])
  
break;
case 65:

    this.$ = $$[$0-1];
  
break;
case 66:

    this.$ = yy.SystemCalls($$[$0-2]);
  
break;
case 67:

      this.$ = yy.createLessThanStatement($$[$0-6], $$[$0-2]);
    
break;
case 68:

        this.$ = yy.createLessThanEqualStatement($$[$0-6], $$[$0-2]);
      
break;
case 69:

    this.$ = yy.createGreaterThanStatement($$[$0-6], $$[$0-2]);
  
break;
case 70:

      this.$ = yy.createGreaterThanEqualStatement($$[$0-6], $$[$0-2]);
    
break;
case 71:

    this.$ = yy.addStatement($$[$0-10], $$[$0-6], $$[$0-2]);
  
break;
case 72:

    this.$ = yy.createMultiStatement($$[$0-10], $$[$0-6], $$[$0-2]);
  
break;
case 73:

    this.$ = yy.createPredicate($$[$0-2]);
  
break;
case 74:

      this.$ = {name:$$[$0-3].name, argsList:[$$[$0]]}
  
break;
case 75:

    $$[$0-4].argsList.push($$[$0]);
    this.$ = $$[$0-4];
  
break;
case 76:

    this.$ = yy.createNotStatement($$[$0-1]);
  
break;
case 77:

    this.$ = yy.createCallStatement($$[$0-2]);
  
break;
case 78:

      this.$ = yy.createOnceStatement($$[$0-1]);
    
break;
case 79:

      this.$ = yy.createFunctorStatement($$[$0-10], $$[$0-6], $$[$0-2]);
    
break;
case 80:

      this.$ = yy.createApplyStatement($$[$0-6], $$[$0-2]);
    
break;
case 81:

    this.$ = yy.createUnionStatement($$[$0-6], $$[$0-2]);
  
break;
case 82:

      this.$ = yy.createVariable($$[$0]);
    
break;
case 83:

      this.$ = yy.createFreeVariable();
    
break;
case 84:

      this.$ = yy.createAtom($$[$0]);
    
break;
case 86:

      this.$ = yy.createString($$[$0])
    
break;
case 87:

      this.$ = yy.createNumber($$[$0]);
    
break;
case 96:

      this.$ = yy.createList($$[$0-5], $$[$0-2]);
    
break;
case 97:

      this.$ = yy.createList($$[$0-1]);
    
break;
case 98:
this.$ = [$$[$0-1]];
break;
case 99:

      $$[$0-4].push($$[$0-1]);
      this.$ = $$[$0-4];
    
break;
case 100:
this.$ = [];
break;
}
},
table: [o([25,26,41],$V0,{3:1,4:2,5:3,10:$V1}),{1:[3]},o([6,25,26,41],$V0,{5:5,10:$V1}),{25:$V2,26:$V3,41:$V4,44:13,45:6,46:7,47:8,65:9,66:10,68:12},o([6,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,30,31,32,34,35,36,37,41,48],[2,40]),{6:[1,16],25:$V2,26:$V3,41:$V4,44:13,45:17,46:18,47:8,65:9,66:10,68:12},o($V5,[2,41]),o($V5,[2,42]),{5:20,10:$V1,32:$V0,48:[1,19]},o([27,31],$V0,{5:21,10:$V1}),{30:$V6},o($V7,[2,84]),o($V7,[2,85]),o($V7,[2,86]),o($V7,[2,87]),o($V8,[2,35],{43:23}),{1:[2,1]},o($V5,[2,43]),o($V5,[2,44]),o($V5,[2,45]),{32:[1,25],49:24},{27:[1,27],31:[1,26]},o($V9,$V0,{5:28,10:$V1}),{9:31,10:$Va,11:$Vb,12:$Vc,13:$Vd,14:$Ve,15:$Vf,16:$Vg,17:$Vh,18:$Vi,19:$Vj,20:$Vk,21:$Vl,22:$Vm,23:$Vn,24:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,37:$VB,38:$VC,39:30,40:[1,32],41:[1,29],42:[1,33]},o($V5,[2,46]),o($VD,$V0,{8:63,50:64,5:65,51:66,52:67,53:68,54:69,55:70,56:71,57:72,58:73,59:74,60:75,61:76,62:77,63:78,10:$V1}),o([10,27,28,31,32,34,36,48],[2,73]),o($V9,$V0,{5:79,10:$V1}),{24:$VE,25:$V2,26:$V3,35:$VF,37:$VG,41:$V4,44:13,47:84,64:80,65:9,66:87,67:88,68:12,69:81,70:82,71:83,73:85,74:86},o($V7,[2,38]),o($V8,[2,36]),o($V8,[2,37]),{40:[1,93],41:[1,92]},{9:94,10:$Va,11:$Vb,12:$Vc,13:$Vd,14:$Ve,15:$Vf,16:$Vg,17:$Vh,18:$Vi,19:$Vj,20:$Vk,21:$Vl,22:$Vm,23:$Vn,24:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,37:$VB,38:$VC},o($V8,[2,3]),o($V8,[2,4]),o($V8,[2,5]),o($V8,[2,6]),o($V8,[2,7]),o($V8,[2,8]),o($V8,[2,9]),o($V8,[2,10]),o($V8,[2,11]),o($V8,[2,12]),o($V8,[2,13]),o($V8,[2,14]),o($V8,[2,15]),o($V8,[2,16]),o($V8,[2,17]),o($V8,[2,18]),o($V8,[2,19]),o($V8,[2,20]),o($V8,[2,21]),o($V8,[2,22]),o($V8,[2,23]),o($V8,[2,24]),o($V8,[2,25]),o($V8,[2,26]),o($V8,[2,27]),o($V8,[2,28]),o($V8,[2,29]),o($V8,[2,30]),o($V8,[2,31]),{27:$VH,28:$VI,48:[1,95]},o($VJ,$V0,{5:98,10:$V1}),{11:[1,110],12:[1,111],13:[1,112],14:[1,113],15:[1,101],16:[1,102],17:[1,103],18:[1,105],19:[1,104],20:[1,106],21:[1,108],22:[1,109],23:[1,107],25:$V2,26:$V3,30:[1,100],41:$V4,44:13,47:99,65:9,66:10,68:12},o($VK,[2,52]),o($VK,[2,53]),o($VK,[2,54]),o($VK,[2,55]),o($VK,[2,56]),o($VK,[2,57]),o($VK,[2,58]),o($VK,[2,59]),o($VK,[2,60]),o($VK,[2,61]),o($VK,[2,62]),o($VK,[2,63]),o($VK,[2,64]),{24:$VE,25:$V2,26:$V3,35:$VF,37:$VG,41:$V4,44:13,47:84,64:114,65:9,66:87,67:88,68:12,69:81,70:82,71:83,73:85,74:86},o($VL,[2,74]),o($VM,[2,88]),o($VM,[2,89]),o($VM,[2,90]),o($VM,[2,91]),o($VN,[2,101],{34:[1,115]}),{27:[1,117],36:[1,116]},o($VM,$VO,{30:$V6}),o($VM,[2,93]),o([24,25,26,27,35,36,37,41],$V0,{5:118,10:$V1}),o($VM,[2,82]),o($VM,[2,83]),o($V8,[2,32]),o($V8,[2,34]),o($V8,[2,33]),o($V5,[2,47]),o($VD,$V0,{5:65,51:66,52:67,53:68,54:69,55:70,56:71,57:72,58:73,59:74,60:75,61:76,62:77,63:78,50:119,10:$V1}),o($VD,$V0,{5:65,51:66,52:67,53:68,54:69,55:70,56:71,57:72,58:73,59:74,60:75,61:76,62:77,63:78,50:120,10:$V1}),o($VJ,[2,48]),o($VK,[2,51]),o($VD,$V0,{50:64,5:65,51:66,52:67,53:68,54:69,55:70,56:71,57:72,58:73,59:74,60:75,61:76,62:77,63:78,8:121,10:$V1}),o($V9,$V0,{5:122,10:$V1}),o($VD,$V0,{50:64,5:65,51:66,52:67,53:68,54:69,55:70,56:71,57:72,58:73,59:74,60:75,61:76,62:77,63:78,8:123,10:$V1}),o($VD,$V0,{50:64,5:65,51:66,52:67,53:68,54:69,55:70,56:71,57:72,58:73,59:74,60:75,61:76,62:77,63:78,8:124,10:$V1}),o($V9,$V0,{5:125,10:$V1}),o($V9,$V0,{5:126,10:$V1}),o($V9,$V0,{5:127,10:$V1}),o($V9,$V0,{5:128,10:$V1}),o($V9,$V0,{5:129,10:$V1}),o($V9,$V0,{5:130,10:$V1}),o($V9,$V0,{5:131,10:$V1}),o($V9,$V0,{5:132,10:$V1}),o($V9,$V0,{5:133,10:$V1}),o($V9,$V0,{5:134,10:$V1}),o($VL,[2,75]),o($V9,$V0,{5:135,10:$V1}),o($VM,[2,97]),o($V9,$V0,{5:136,10:$V1}),o($VN,[2,100],{65:9,68:12,44:13,69:81,70:82,71:83,47:84,73:85,74:86,66:87,67:88,64:137,24:$VE,25:$V2,26:$V3,35:$VF,37:$VG,41:$V4}),o($VJ,$V0,{5:138,10:$V1}),o($VJ,$V0,{5:139,10:$V1}),{27:$VH,28:$VI,31:[1,140]},{24:$VE,25:$V2,26:$V3,35:$VF,37:$VG,41:$V4,44:13,47:84,64:141,65:9,66:87,67:88,68:12,69:81,70:82,71:83,73:85,74:86},{27:$VH,28:$VI,31:[1,142]},{27:$VH,28:$VI,31:[1,143]},{24:$VE,25:$V2,26:$V3,35:$VF,37:$VG,41:$V4,44:13,47:84,64:144,65:9,66:87,67:88,68:12,69:81,70:82,71:83,73:85,74:86},{24:$VE,25:$V2,26:$V3,35:$VF,37:$VG,41:$V4,44:13,47:84,64:145,65:9,66:87,67:88,68:12,69:81,70:82,71:83,73:85,74:86},{24:$VE,25:$V2,26:$V3,35:$VF,37:$VG,41:$V4,44:13,47:84,64:146,65:9,66:87,67:88,68:12,69:81,70:82,71:83,73:85,74:86},{24:$VE,25:$V2,26:$V3,35:$VF,37:$VG,41:$V4,44:13,47:84,64:147,65:9,66:87,67:88,68:12,69:81,70:82,71:83,73:85,74:86},{24:$VE,25:$V2,26:$V3,35:$VF,37:$VG,41:$V4,44:13,47:84,64:148,65:9,66:87,67:88,68:12,69:81,70:82,71:83,73:85,74:86},{24:$VE,25:$V2,26:$V3,35:$VF,37:$VG,41:$V4,44:13,47:84,64:149,65:9,66:87,67:88,68:12,69:81,70:82,71:83,73:85,74:86},{24:$VE,25:$V2,26:$V3,35:$VF,37:$VG,41:$V4,44:13,47:84,64:150,65:9,66:87,67:88,68:12,69:81,70:82,71:83,73:85,74:86},{24:$VE,25:$V2,26:$V3,35:$VF,37:$VG,41:$V4,44:13,47:84,64:151,65:9,66:87,67:88,68:12,69:81,70:82,71:83,73:85,74:86},{24:$VE,25:$V2,26:$V3,35:$VF,37:$VG,41:$V4,44:13,47:84,64:152,65:9,66:87,67:88,68:12,69:81,70:82,71:83,73:85,74:86},{24:$VE,25:$V2,26:$V3,35:$VF,37:$VG,41:$V4,44:13,47:84,64:153,65:9,66:87,67:88,68:12,69:81,70:82,71:83,73:85,74:86},{24:$VE,25:$V2,26:$V3,35:$VF,37:$VG,41:$V4,44:13,66:157,67:88,68:12,70:156,71:155,72:154,73:85,74:86},{24:$VE,25:$V2,26:$V3,35:$VF,37:$VG,41:$V4,44:13,47:84,64:158,65:9,66:87,67:88,68:12,69:81,70:82,71:83,73:85,74:86},o($VP,$V0,{5:159,10:$V1}),o($VJ,[2,49]),o($VJ,[2,50]),o($VK,[2,65]),{5:160,10:$V1,27:$V0},o($VK,[2,76]),o($VK,[2,78]),{5:161,10:$V1,27:$V0},{5:162,10:$V1,31:$V0},{5:163,10:$V1,27:$V0},{5:164,10:$V1,31:$V0},{5:165,10:$V1,27:$V0},{5:166,10:$V1,27:$V0},{5:167,10:$V1,27:$V0},{5:168,10:$V1,27:$V0},{5:169,10:$V1,27:$V0},{5:170,10:$V1,27:$V0},{5:171,10:$V1,36:$V0},o($VQ,[2,94]),o($VQ,[2,95]),o($VQ,$VO),o($VP,$V0,{5:172,10:$V1}),o($VP,[2,98]),{27:[1,173]},{27:[1,174]},{31:[1,175]},{27:[1,176]},{31:[1,177]},{27:[1,178]},{27:[1,179]},{27:[1,180]},{27:[1,181]},{27:[1,182]},{27:[1,183]},{36:[1,184]},o($VP,[2,99]),o($V9,$V0,{5:185,10:$V1}),o($V9,$V0,{5:186,10:$V1}),o($VK,[2,77]),o($V9,$V0,{5:187,10:$V1}),o($VK,[2,66]),o($V9,$V0,{5:188,10:$V1}),o($V9,$V0,{5:189,10:$V1}),o($V9,$V0,{5:190,10:$V1}),o($V9,$V0,{5:191,10:$V1}),o($V9,$V0,{5:192,10:$V1}),o($V9,$V0,{5:193,10:$V1}),o($VM,[2,96]),{24:$VE,25:$V2,26:$V3,35:$VF,37:$VG,41:$V4,44:13,47:84,64:194,65:9,66:87,67:88,68:12,69:81,70:82,71:83,73:85,74:86},{24:$VE,25:$V2,26:$V3,35:$VF,37:$VG,41:$V4,44:13,47:84,64:195,65:9,66:87,67:88,68:12,69:81,70:82,71:83,73:85,74:86},{24:$VE,25:$V2,26:$V3,35:$VF,37:$VG,41:$V4,44:13,47:84,64:196,65:9,66:87,67:88,68:12,69:81,70:82,71:83,73:85,74:86},{24:$VE,25:$V2,26:$V3,35:$VF,37:$VG,41:$V4,44:13,47:84,64:197,65:9,66:87,67:88,68:12,69:81,70:82,71:83,73:85,74:86},{24:$VE,25:$V2,26:$V3,35:$VF,37:$VG,41:$V4,44:13,47:84,64:198,65:9,66:87,67:88,68:12,69:81,70:82,71:83,73:85,74:86},{24:$VE,25:$V2,26:$V3,35:$VF,37:$VG,41:$V4,44:13,47:84,64:199,65:9,66:87,67:88,68:12,69:81,70:82,71:83,73:85,74:86},{24:$VE,25:$V2,26:$V3,35:$VF,37:$VG,41:$V4,44:13,47:84,64:200,65:9,66:87,67:88,68:12,69:81,70:82,71:83,73:85,74:86},{24:$VE,25:$V2,26:$V3,35:$VF,37:$VG,41:$V4,44:13,47:84,64:201,65:9,66:87,67:88,68:12,69:81,70:82,71:83,73:85,74:86},{24:$VE,25:$V2,26:$V3,35:$VF,37:$VG,41:$V4,44:13,47:84,64:202,65:9,66:87,67:88,68:12,69:81,70:82,71:83,73:85,74:86},{5:203,10:$V1,31:$V0},{5:204,10:$V1,31:$V0},{5:205,10:$V1,27:$V0},{5:206,10:$V1,27:$V0},{5:207,10:$V1,27:$V0},{5:208,10:$V1,31:$V0},{5:209,10:$V1,31:$V0},{5:210,10:$V1,31:$V0},{5:211,10:$V1,31:$V0},{31:[1,212]},{31:[1,213]},{27:[1,214]},{27:[1,215]},{27:[1,216]},{31:[1,217]},{31:[1,218]},{31:[1,219]},{31:[1,220]},o($VK,[2,81]),o($VK,[2,80]),o($V9,$V0,{5:221,10:$V1}),o($V9,$V0,{5:222,10:$V1}),o($V9,$V0,{5:223,10:$V1}),o($VK,[2,69]),o($VK,[2,70]),o($VK,[2,67]),o($VK,[2,68]),{24:$VE,25:$V2,26:$V3,35:$VF,37:$VG,41:$V4,44:13,47:84,64:224,65:9,66:87,67:88,68:12,69:81,70:82,71:83,73:85,74:86},{24:$VE,25:$V2,26:$V3,35:$VF,37:$VG,41:$V4,44:13,47:84,64:225,65:9,66:87,67:88,68:12,69:81,70:82,71:83,73:85,74:86},{24:$VE,25:$V2,26:$V3,35:$VF,37:$VG,41:$V4,44:13,47:84,64:226,65:9,66:87,67:88,68:12,69:81,70:82,71:83,73:85,74:86},{5:227,10:$V1,31:$V0},{5:228,10:$V1,31:$V0},{5:229,10:$V1,31:$V0},{31:[1,230]},{31:[1,231]},{31:[1,232]},o($VK,[2,79]),o($VK,[2,71]),o($VK,[2,72])],
defaultActions: {16:[2,1]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return "WHITE_SPACE"
break;
case 1:return "GREATER_THAN"
break;
case 2:return "GREATER_THAN_EQUAL"
break;
case 3:return "LESS_THAN"
break;
case 4:return "LESS_THAN_EQUAL"
break;
case 5:return "UNIFY"
break;
case 6:return 16
break;
case 7:return "ONCE"
break;
case 8:return "CALL"
break;
case 9:return "APPLY"
break;
case 10:return "FUNCTOR"
break;
case 11:return "ADD"
break;
case 12:return "MULTI"
break;
case 13:return "SYSTEM_CALL"
break;
case 14:return 24
break;
case 15:return 25
break;
case 16:return 26
break;
case 17:return "DOUBLE_QUOTE"
break;
case 18:return "ESCAPE_CHAR"
break;
case 19:return 27
break;
case 20:return 28
break;
case 21:return 48
break;
case 22:return 30
break;
case 23:return 31
break;
case 24:return 32
break;
case 25:return 33
break;
case 26:return "|"
break;
case 27:return "["
break;
case 28:return "]"
break;
case 29:return "_"
break;
case 30:return 6
break;
case 31:return 38
break;
}
},
rules: [/^(?:\s+)/,/^(?:>\()/,/^(?:>=\()/,/^(?:<\()/,/^(?:<=\()/,/^(?:=\()/,/^(?:not\()/,/^(?:once\()/,/^(?:call\()/,/^(?:apply\()/,/^(?:functor\()/,/^(?:\+\()/,/^(?:\*\()/,/^(?:systemCall\()/,/^(?:[A-Z][_A-Za-z0-9]*)/,/^(?:[a-z][_A-Za-z0-9]*)/,/^(?:-?[0-9]+(\.[0-9]+)?)/,/^(?:[\"])/,/^(?:[\\])/,/^(?:,)/,/^(?:;)/,/^(?:\.)/,/^(?:\()/,/^(?:\))/,/^(?::-)/,/^(?:!)/,/^(?:\|)/,/^(?:\[)/,/^(?:\])/,/^(?:_\b)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}